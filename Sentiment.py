# -*- coding: utf-8 -*-
"""data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18cvBMePL5ykaqd-gvu5gPCzJ5msjDnG4
"""

from textblob import TextBlob
import matplotlib.pyplot as plt
import pandas as pd
import re
import plotly.express as px

data = pd.read_csv('data/Reviews.csv')
data

review=data['Review']
review



positive=0
negative=0
neutral=0
polarity=0

token = ''
Neutral_review=[]
Negative_review=[]
Positive_review=[]

for i in review:
    analysis = TextBlob(i)

    polarity += analysis.sentiment.polarity

    if (analysis.sentiment.polarity==0.00):
        neutral += 1
        Neutral_review.append(i)
    elif (analysis.sentiment.polarity<0.00):
        negative += 1
        Negative_review.append(i)
    elif (analysis.sentiment.polarity>0.00):
        positive += 1
        Positive_review.append(i)
    tdata = str(analysis)
    token += ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])"," ",tdata).split())
    


'''if(polarity==0):
   print("Neutral")
elif(polarity<0.00):
   print("Negative")
elif(polarity>0.00):
    print("Positive")'''


colour = ["#bdc3c7", "#e74c3c", "#2c3e50", "#f39c12", "#7ccc63"]

sizes = [neutral,negative,positive] 
label = ['Netural' , 'Negative','Positive']
senti_pie = px.pie(values=sizes, names=label)
senti_pie.update_layout(title_text="<b> Distribution of Sentiment (%)</b>")
senti_pie.update_traces(marker=dict(colors=["#bdc3c7", "#e74c3c", "#2c3e50"]))
#fig.show()


senti_barh = px.bar(x=sizes,
                    y = label,orientation='h',
                    color=colour[:3],
                    color_discrete_map="identity", 
                    title="<b>Distribution of Sentiment </b>",
                    labels={"x": "Count", "y": "Sentiment"},)

#fig.show()
#sen_graph = plt.barh(label,sizes,color=newcolor)

#plt.show()

word_freq = {key: token.count(key) for key in token.split()}
#print("The words frequency : " + str(word_freq))

x = dict(sorted(word_freq.items(), key=lambda item: item[1],reverse=True))
#print(x)

connecting_words=['V','C','O','N','be','us','go','with','for','to','To','In','there','this','they','the','and','a','in','of','is','Is','t','i','n','r','s','u','m','an','he','on','it','or','I','at','ti','as','A','x','me','wi','ur','all','so','for','am','of']

for word in list(x):
    if(word in connecting_words):
        del x[word]

word_freq_df = pd.DataFrame.from_dict({"Word": x.keys(),"Frequency": x.values()})
word_freq_df

plot_df = word_freq_df[:5]
plot_df


senti_word = px.bar(plot_df, x="Word", 
                    y="Frequency",  
                    color=colour,
                    color_discrete_map="identity" )


review_count=0
for i in review:
  review_count+=1
# print(review_count)
#fig.show()
#word_freq_graph = plt.bar(*zip(*x.items()),color=newcolor)
#plt.show()

'''from wordcloud import WordCloud, STOPWORDS

stopwords = set(STOPWORDS)

wordcloud = WordCloud(width = 800, height = 800, 
                background_color ='black', 
                stopwords = stopwords, 
                min_font_size = 10).generate(token)

plt.figure(figsize = (8, 8), facecolor = "red") 
plt.imshow(wordcloud) 
plt.axis("off") 
plt.tight_layout(pad = 0) 
plt.show()


for i in Negative_review:
  print(i)
'''